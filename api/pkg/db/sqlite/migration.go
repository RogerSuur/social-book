// Code generated by go-bindata.
// sources:
// api/pkg/db/migrations/sqlite/000001_initial_schema.down.sql
// api/pkg/db/migrations/sqlite/000001_initial_schema.up.sql
// api/pkg/db/migrations/sqlite/000002_initial_schema.down.sql
// api/pkg/db/migrations/sqlite/000002_initial_schema.up.sql
// DO NOT EDIT!

package database

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x50\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x2f\xca\x2f\x2d\x88\x4f\x2d\x4b\xcd\x2b\x29\xb6\xe6\xc2\xae\xa6\xb4\x38\xb5\x28\x1e\xac\x10\xa7\x92\xe4\xfc\xdc\x5c\x7c\x46\x24\xe6\xe4\xe4\x97\xa7\xa6\xc4\x17\x14\x65\x96\x25\x96\xa4\xc6\x17\xe4\x17\xe3\x56\x8c\x5f\x12\x64\x42\x72\x65\x7c\x49\x65\x41\x2a\x2e\x35\xf8\xdd\x9a\x96\x0f\x76\x4c\x11\x5e\xff\x16\x5b\x73\x01\x02\x00\x00\xff\xff\x7e\xc5\x46\x74\x31\x01\x00\x00")

func _000001_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initial_schemaDownSql,
		"000001_initial_schema.down.sql",
	)
}

func _000001_initial_schemaDownSql() (*asset, error) {
	bytes, err := _000001_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initial_schema.down.sql", size: 305, mode: os.FileMode(420), modTime: time.Unix(1679512277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\xcf\x6f\x9b\x30\x14\x3e\xe3\xbf\xe2\xa9\xa7\x20\x31\x69\xdb\x75\x27\xda\x3a\x15\x1a\x25\x1b\x71\xa6\xf6\x84\x1c\x70\x53\x6f\x80\x11\x36\xed\xf2\xdf\x4f\x76\x42\x4a\x42\xec\xa4\x91\xba\xa3\xdf\xef\xef\x7b\xdf\x83\x9b\x14\x87\x04\x03\x09\xaf\x63\x0c\xd1\x14\x92\x19\x01\xfc\x10\xcd\xc9\x1c\x3a\xc9\x5a\x09\x13\xe4\xf1\x02\xa2\x84\xe0\x3b\x9c\xc2\x8f\x34\xba\x0f\xd3\x47\xf8\x8e\x1f\x03\xe4\x3d\x89\xb6\xa6\x15\x03\x82\x1f\x88\xc9\x4c\x16\x71\x1c\x20\x4f\x76\xc7\xed\xac\xa2\xbc\xdc\xb7\xc2\x22\x89\x7e\x2e\x70\x80\xbc\x86\x4a\xf9\x2a\xda\x62\x94\xb5\xe4\xad\x7a\x2e\xe8\x1a\x6e\x43\x82\x49\x74\xaf\x83\x6b\x9e\xff\xd9\xb5\x08\x90\x47\x97\xa2\x53\xfd\x83\x57\x74\xc5\xb2\x86\xaa\xe7\xde\x92\xb7\x8c\x2a\x56\x64\x54\x0d\x8b\x70\x99\x35\xdd\xb2\xe4\x39\x5c\xcf\x66\xf1\xdb\x48\xb7\x78\x1a\x2e\x62\x02\x4f\xb4\x94\x0c\xf9\xdf\x10\x72\xb0\xf4\x24\xca\x52\xbc\xb2\x56\xba\x89\xd2\x41\xbc\x5e\x65\x83\x90\x01\xc4\xbe\x88\xc5\x4d\xf3\x9c\x35\x8a\x15\xb0\x14\xa2\xdc\x77\x28\xfe\xc2\x46\x66\x6f\x3a\x4b\x71\x74\x97\xe8\xee\x30\x19\x36\xf7\x91\xe7\x79\x29\x9e\xe2\x14\x27\x37\x78\xbb\xe3\x09\x2f\x7c\xef\x78\x96\x19\xc9\x9a\x64\xb8\x71\x91\xb3\x6a\x45\xd7\x38\x99\x31\x9b\x11\x36\xe0\x8a\xab\x72\x2c\xa3\x82\xc9\xbc\xe5\x8d\xe2\xa2\x76\x2c\xd8\x4e\xc8\x5b\xcf\xcb\x91\x35\x2d\x7f\xa1\xf9\x3a\x53\xeb\x86\x6d\x6f\x84\xd7\x8a\xad\x58\x3b\x04\x38\x9c\xc1\xc8\x55\xb1\xbf\x6a\x2b\x79\x1b\x22\x1d\x62\xda\x47\xc9\x1c\xa7\x44\xd3\x32\x3b\x68\xc7\x8b\x00\x74\x39\x1f\xfd\x0a\xe3\x05\x9e\x03\x9a\x7c\x0e\xe0\x6a\x23\xe6\x2b\x3f\x40\x93\x2f\xfa\xa9\x73\x14\x33\xef\xaf\x01\x5c\xc9\x6e\xf9\x69\x67\x73\x8b\xba\x11\x52\xb9\x4f\x5f\x33\xf5\xae\xa5\xe5\xa2\x56\xac\x56\x23\xfb\x10\x99\xa5\xe0\x89\xe5\x8e\xcf\x7d\x7f\xdd\xdb\x51\x7d\xb0\x2e\xfb\x20\xe1\x60\xa4\x51\xe2\xd0\x7f\x96\x58\xa8\x39\xa5\x22\xdb\xb2\x9f\x9d\xa6\x57\x47\x58\xd8\x70\x30\x6f\x85\x7d\x1c\xf5\x3e\xe8\x4d\xc7\xc3\x70\x33\xea\x59\x20\x73\x51\x55\xac\xfe\x10\x5c\x36\xed\x9c\xf5\xa1\xbf\x88\x20\x78\x27\x43\xb0\xa3\xe8\xc4\x0f\x35\xdb\x7c\x12\x2f\xbd\x2d\x93\x6d\xf1\xfd\x16\xbc\xfe\x20\xe8\x7d\xdb\xc3\x84\x1e\xcc\x19\xe0\x37\x25\xd8\xcb\x49\x89\xb8\x20\xba\x34\xe2\xde\xbc\x69\x9c\x29\x5e\xb1\xa3\x6e\xed\x90\x0d\xad\xfb\xca\x67\xff\x7b\xfe\x3b\xc5\xff\x02\x00\x00\xff\xff\x51\x25\xd3\xce\xb1\x09\x00\x00")

func _000001_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initial_schemaUpSql,
		"000001_initial_schema.up.sql",
	)
}

func _000001_initial_schemaUpSql() (*asset, error) {
	bytes, err := _000001_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initial_schema.up.sql", size: 2481, mode: os.FileMode(420), modTime: time.Unix(1680280747, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x50\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x2f\xca\x2f\x2d\x88\x4f\x2d\x4b\xcd\x2b\x89\x4f\x2c\x29\x49\xcd\x4b\x49\xcc\x4b\x4e\xb5\xe6\xc2\xae\x3a\x37\xb5\xb8\x38\x31\x3d\xb5\x18\x97\x7c\x5e\x7e\x49\x66\x5a\x66\x72\x62\x49\x66\x7e\x5e\x7c\x49\x65\x01\x91\x2a\x53\x52\x4b\x12\x33\x73\x88\x52\x5b\x6c\x0d\x08\x00\x00\xff\xff\x41\x56\x0e\xd5\xc8\x00\x00\x00")

func _000002_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_initial_schemaDownSql,
		"000002_initial_schema.down.sql",
	)
}

func _000002_initial_schemaDownSql() (*asset, error) {
	bytes, err := _000002_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_initial_schema.down.sql", size: 200, mode: os.FileMode(420), modTime: time.Unix(1680097111, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x8f\xda\x30\x10\x3d\xc7\xbf\x62\xc4\x09\xa4\xa8\xea\xc7\xb1\xa7\xec\xd6\xac\xa2\x42\x58\x25\xa6\xda\x3d\x45\x56\x32\x80\x2b\x70\xd2\xd8\x50\x21\xd4\xff\x5e\xd9\x71\x76\x13\x9a\xb0\x69\xa5\x9e\x62\xfc\x66\xde\x9b\x79\x63\x9b\xfb\x98\x06\x8c\x02\x0b\xee\x16\x14\xc2\x39\x44\x2b\x06\xf4\x29\x4c\x58\x02\xdb\xaa\x38\x96\x29\x9e\x50\xea\x94\x6b\x8d\x32\xe7\x32\x43\x98\x12\x4f\xe4\x10\x46\x8c\x3e\xd0\x18\x1e\xe3\x70\x19\xc4\xcf\xf0\x95\x3e\xfb\xc4\x3b\x2a\xac\xd2\x16\x6a\xd8\xa2\xf5\x62\xe1\x13\xaf\xe6\xe9\xc7\x84\x72\x02\x42\x6e\xe1\x6e\xb5\x32\x7b\xf3\x55\x4c\xc3\x87\xc8\x10\xc3\xd4\xf1\xce\x80\x78\x5e\x4c\xe7\x34\xa6\xd1\x3d\x4d\xc0\x6c\x2b\x98\x8a\x7c\x76\x15\xdf\x88\x5d\x27\xb4\x5a\x72\x79\xb3\xcf\x84\x90\x1b\x26\x1c\x50\x29\xbe\x45\x75\xab\x6b\x85\x32\x1f\xec\xbb\xc2\x4c\x94\xa2\xdb\xbb\x4f\xbc\xba\x92\xce\x56\x56\x48\x8d\x52\x03\xa3\x4f\xac\xe3\xce\x81\x6f\x31\x2d\xb9\xde\x59\xa8\x16\x34\x23\x81\x2f\x01\xa3\x2c\x5c\xd2\xae\x1e\xcf\x87\xb0\x8e\x47\x2f\x55\x8f\x76\xb5\xdd\xca\xe8\xa4\xa6\xd1\xde\x51\x8c\x1c\x82\x2c\xb4\xd8\x88\x8c\x6b\x51\xc8\x54\x9f\xcb\x9b\xe3\x00\x00\x40\xa9\x85\x3e\x5f\x3b\x69\x90\x1c\x55\x56\x89\xd2\x30\xf5\xc1\x1a\x0f\xe5\x9e\x6b\xec\x62\xb6\xc0\x30\x4a\x68\xcc\x8c\xe6\xaa\xa7\x20\xd3\x88\xef\x74\xfd\xb6\x8a\xff\xc2\x39\x23\xdf\x82\xc5\x9a\x26\x40\xa6\xef\x7d\x98\x58\xc7\x26\x6e\x01\x9b\x62\xbf\x2f\x7e\x42\x85\x3f\x8e\xa8\xb4\xd9\x5e\x9b\xed\x8b\x01\x25\x3f\xe0\x2f\xd8\x71\x05\x66\xf0\x70\x2e\x8e\xc0\xaf\x12\xde\x4d\x66\x3e\x99\x7e\xf0\x61\x52\xfb\x3a\x69\x56\x20\xe4\x49\x68\x5b\x68\x1f\xa9\x45\x51\x59\x4e\x5d\xc0\xf7\x42\x48\xd0\x3b\xac\xa7\x03\x17\xfb\xb1\x91\x96\xff\x63\x0f\xbf\x4d\x19\x5f\xb6\x8b\x1c\x21\xf6\xa9\x91\x70\xf7\xf5\x55\xd2\xfe\x1e\xd2\xca\x2a\xe4\x1a\x73\xe0\xb2\x8e\x83\x8b\xfd\xd4\x01\x9b\xa2\x1a\x52\x34\x47\x70\xf4\x19\xcc\x51\x73\xb1\x7f\xeb\x14\xde\x7a\x17\x0c\xfe\xc7\x29\x1a\x0e\xad\x0f\xd6\xc0\x13\xe3\x5a\x36\xb7\xfe\x7e\x1d\xc7\x34\x62\xa9\xb9\xf9\x09\x0b\x96\x8f\xff\xe3\x1d\xe8\xab\xfb\x3a\xb9\xff\x86\xfc\xdd\x55\x7f\xcb\xdf\x0a\x33\x14\xa7\xd1\x0e\xbb\xa1\x0d\x47\x2b\x44\xd9\x7e\x3a\x1b\x15\x9e\xd9\xe7\xa2\xef\x8f\xa9\x55\xc2\xbf\xd9\xf7\x5a\xd4\x4d\x07\x5d\x58\xe3\xe1\xef\x00\x00\x00\xff\xff\xb1\x3c\x63\x72\xb6\x07\x00\x00")

func _000002_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_initial_schemaUpSql,
		"000002_initial_schema.up.sql",
	)
}

func _000002_initial_schemaUpSql() (*asset, error) {
	bytes, err := _000002_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_initial_schema.up.sql", size: 1974, mode: os.FileMode(420), modTime: time.Unix(1680098777, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_initial_schema.down.sql": _000001_initial_schemaDownSql,
	"000001_initial_schema.up.sql": _000001_initial_schemaUpSql,
	"000002_initial_schema.down.sql": _000002_initial_schemaDownSql,
	"000002_initial_schema.up.sql": _000002_initial_schemaUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"000001_initial_schema.down.sql": &bintree{_000001_initial_schemaDownSql, map[string]*bintree{}},
	"000001_initial_schema.up.sql": &bintree{_000001_initial_schemaUpSql, map[string]*bintree{}},
	"000002_initial_schema.down.sql": &bintree{_000002_initial_schemaDownSql, map[string]*bintree{}},
	"000002_initial_schema.up.sql": &bintree{_000002_initial_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

